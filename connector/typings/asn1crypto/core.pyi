"""
This type stub file was generated by pyright.
"""

import sys

"""
ASN.1 type classes for universal types. Exports the following items:

 - load()
 - Any()
 - Asn1Value()
 - BitString()
 - BMPString()
 - Boolean()
 - CharacterString()
 - Choice()
 - EmbeddedPdv()
 - Enumerated()
 - GeneralizedTime()
 - GeneralString()
 - GraphicString()
 - IA5String()
 - InstanceOf()
 - Integer()
 - IntegerBitString()
 - IntegerOctetString()
 - Null()
 - NumericString()
 - ObjectDescriptor()
 - ObjectIdentifier()
 - OctetBitString()
 - OctetString()
 - PrintableString()
 - Real()
 - RelativeOid()
 - Sequence()
 - SequenceOf()
 - Set()
 - SetOf()
 - TeletexString()
 - UniversalString()
 - UTCTime()
 - UTF8String()
 - VideotexString()
 - VisibleString()
 - VOID
 - Void()

Other type classes are defined that help compose the types listed above.
"""
if sys.version_info <= (3, ):
    ...
else:
    _PY2 = ...
CLASS_NUM_TO_NAME_MAP = ...
CLASS_NAME_TO_NUM_MAP = ...
METHOD_NUM_TO_NAME_MAP = ...
_OID_RE = ...
_SETUP_CLASSES = ...
def load(encoded_data, strict=...):
    """
    Loads a BER/DER-encoded byte string and construct a universal object based
    on the tag value:

     - 1: Boolean
     - 2: Integer
     - 3: BitString
     - 4: OctetString
     - 5: Null
     - 6: ObjectIdentifier
     - 7: ObjectDescriptor
     - 8: InstanceOf
     - 9: Real
     - 10: Enumerated
     - 11: EmbeddedPdv
     - 12: UTF8String
     - 13: RelativeOid
     - 16: Sequence,
     - 17: Set
     - 18: NumericString
     - 19: PrintableString
     - 20: TeletexString
     - 21: VideotexString
     - 22: IA5String
     - 23: UTCTime
     - 24: GeneralizedTime
     - 25: GraphicString
     - 26: VisibleString
     - 27: GeneralString
     - 28: UniversalString
     - 29: CharacterString
     - 30: BMPString

    :param encoded_data:
        A byte string of BER or DER-encoded data

    :param strict:
        A boolean indicating if trailing data should be forbidden - if so, a
        ValueError will be raised when trailing data exists

    :raises:
        ValueError - when strict is True and trailing data is present
        ValueError - when the encoded value tag a tag other than listed above
        ValueError - when the ASN.1 header length is longer than the data
        TypeError - when encoded_data is not a byte string

    :return:
        An instance of the one of the universal classes
    """
    ...

class Asn1Value:
    """
    The basis of all ASN.1 values
    """
    method = ...
    class_ = ...
    tag = ...
    _bad_tag = ...
    implicit = ...
    explicit = ...
    _header = ...
    contents = ...
    _trailer = ...
    _native = ...
    @classmethod
    def load(cls, encoded_data, strict=..., **kwargs):
        """
        Loads a BER/DER-encoded byte string using the current class as the spec

        :param encoded_data:
            A byte string of BER or DER-encoded data

        :param strict:
            A boolean indicating if trailing data should be forbidden - if so, a
            ValueError will be raised when trailing data exists

        :return:
            An instance of the current class
        """
        ...
    
    def __init__(self, explicit=..., implicit=..., no_explicit=..., tag_type=..., class_=..., tag=..., optional=..., default=..., contents=..., method=...) -> None:
        """
        The optional parameter is not used, but rather included so we don't
        have to delete it from the parameter dictionary when passing as keyword
        args

        :param explicit:
            An int tag number for explicit tagging, or a 2-element tuple of
            class and tag.

        :param implicit:
            An int tag number for implicit tagging, or a 2-element tuple of
            class and tag.

        :param no_explicit:
            If explicit tagging info should be removed from this instance.
            Used internally to allow contructing the underlying value that
            has been wrapped in an explicit tag.

        :param tag_type:
            None for normal values, or one of "implicit", "explicit" for tagged
            values. Deprecated in favor of explicit and implicit params.

        :param class_:
            The class for the value - defaults to "universal" if tag_type is
            None, otherwise defaults to "context". Valid values include:
             - "universal"
             - "application"
             - "context"
             - "private"
            Deprecated in favor of explicit and implicit params.

        :param tag:
            The integer tag to override - usually this is used with tag_type or
            class_. Deprecated in favor of explicit and implicit params.

        :param optional:
            Dummy parameter that allows "optional" key in spec param dicts

        :param default:
            The default value to use if the value is currently None

        :param contents:
            A byte string of the encoded contents of the value

        :param method:
            The method for the value - no default value since this is
            normally set on a class. Valid values include:
             - "primitive" or 0
             - "constructed" or 1

        :raises:
            ValueError - when implicit, explicit, tag_type, class_ or tag are invalid values
        """
        ...
    
    def __str__(self) -> str:
        """
        Since str is different in Python 2 and 3, this calls the appropriate
        method, __unicode__() or __bytes__()

        :return:
            A unicode string
        """
        ...
    
    def __repr__(self): # -> str:
        """
        :return:
            A unicode string
        """
        ...
    
    def __bytes__(self): # -> bytes:
        """
        A fall-back method for print() in Python 2

        :return:
            A byte string of the output of repr()
        """
        ...
    
    def __unicode__(self): # -> str:
        """
        A fall-back method for print() in Python 3

        :return:
            A unicode string of the output of repr()
        """
        ...
    
    def __copy__(self): # -> Self:
        """
        Implements the copy.copy() interface

        :return:
            A new shallow copy of the current Asn1Value object
        """
        ...
    
    def __deepcopy__(self, memo): # -> Self:
        """
        Implements the copy.deepcopy() interface

        :param memo:
            A dict for memoization

        :return:
            A new deep copy of the current Asn1Value object
        """
        ...
    
    def copy(self): # -> Self:
        """
        Copies the object, preserving any special tagging from it

        :return:
            An Asn1Value object
        """
        ...
    
    def retag(self, tagging, tag=...): # -> Self:
        """
        Copies the object, applying a new tagging to it

        :param tagging:
            A dict containing the keys "explicit" and "implicit". Legacy
            API allows a unicode string of "implicit" or "explicit".

        :param tag:
            A integer tag number. Only used when tagging is a unicode string.

        :return:
            An Asn1Value object
        """
        ...
    
    def untag(self): # -> Self:
        """
        Copies the object, removing any special tagging from it

        :return:
            An Asn1Value object
        """
        ...
    
    def debug(self, nest_level=...): # -> None:
        """
        Show the binary data and parsed data in a tree structure
        """
        ...
    
    def dump(self, force=...):
        """
        Encodes the value using DER

        :param force:
            If the encoded contents already exist, clear them and regenerate
            to ensure they are in DER format instead of BER format

        :return:
            A byte string of the DER-encoded value
        """
        ...
    


class ValueMap:
    """
    Basic functionality that allows for mapping values from ints or OIDs to
    python unicode strings
    """
    _map = ...
    _reverse_map = ...


class Castable:
    """
    A mixin to handle converting an object between different classes that
    represent the same encoded value, but with different rules for converting
    to and from native Python values
    """
    def cast(self, other_class):
        """
        Converts the current object into an object of a different class. The
        new class must use the ASN.1 encoding for the value.

        :param other_class:
            The class to instantiate the new object from

        :return:
            An instance of the type other_class
        """
        ...
    


class Constructable:
    """
    A mixin to handle string types that may be constructed from chunks
    contained within an indefinite length BER-encoded container
    """
    _indefinite = ...


class Void(Asn1Value):
    """
    A representation of an optional value that is not present. Has .native
    property and .dump() method to be compatible with other value classes.
    """
    contents = ...
    def __eq__(self, other) -> bool:
        """
        :param other:
            The other Primitive to compare to

        :return:
            A boolean
        """
        ...
    
    def __nonzero__(self): # -> Literal[False]:
        ...
    
    def __len__(self): # -> Literal[0]:
        ...
    
    def __iter__(self): # -> Iterator[Never]:
        ...
    
    @property
    def native(self): # -> None:
        """
        The native Python datatype representation of this value

        :return:
            None
        """
        ...
    
    def dump(self, force=...): # -> Literal[b""]:
        """
        Encodes the value using DER

        :param force:
            If the encoded contents already exist, clear them and regenerate
            to ensure they are in DER format instead of BER format

        :return:
            A byte string of the DER-encoded value
        """
        ...
    


VOID = ...
class Any(Asn1Value):
    """
    A value class that can contain any value, and allows for easy parsing of
    the underlying encoded value using a spec. This is normally contained in
    a Structure that has an ObjectIdentifier field and _oid_pair and _oid_specs
    defined.
    """
    _parsed = ...
    def __init__(self, value=..., **kwargs) -> None:
        """
        Sets the value of the object before passing to Asn1Value.__init__()

        :param value:
            An Asn1Value object that will be set as the parsed value
        """
        ...
    
    @property
    def native(self):
        """
        The native Python datatype representation of this value

        :return:
            The .native value from the parsed value object
        """
        ...
    
    @property
    def parsed(self): # -> Asn1Value:
        """
        Returns the parsed object from .parse()

        :return:
            The object returned by .parse()
        """
        ...
    
    def parse(self, spec=..., spec_params=...): # -> Asn1Value:
        """
        Parses the contents generically, or using a spec with optional params

        :param spec:
            A class derived from Asn1Value that defines what class_ and tag the
            value should have, and the semantics of the encoded value. The
            return value will be of this type. If omitted, the encoded value
            will be decoded using the standard universal tag based on the
            encoded tag number.

        :param spec_params:
            A dict of params to pass to the spec object

        :return:
            An object of the type spec, or if not present, a child of Asn1Value
        """
        ...
    
    def dump(self, force=...):
        """
        Encodes the value using DER

        :param force:
            If the encoded contents already exist, clear them and regenerate
            to ensure they are in DER format instead of BER format

        :return:
            A byte string of the DER-encoded value
        """
        ...
    


class Choice(Asn1Value):
    """
    A class to handle when a value may be one of several options
    """
    _choice = ...
    _name = ...
    _parsed = ...
    _contents = ...
    _alternatives = ...
    _id_map = ...
    _name_map = ...
    @classmethod
    def load(cls, encoded_data, strict=..., **kwargs):
        """
        Loads a BER/DER-encoded byte string using the current class as the spec

        :param encoded_data:
            A byte string of BER or DER encoded data

        :param strict:
            A boolean indicating if trailing data should be forbidden - if so, a
            ValueError will be raised when trailing data exists

        :return:
            A instance of the current class
        """
        ...
    
    def __init__(self, name=..., value=..., **kwargs) -> None:
        """
        Checks to ensure implicit tagging is not being used since it is
        incompatible with Choice, then forwards on to Asn1Value.__init__()

        :param name:
            The name of the alternative to be set - used with value.
            Alternatively this may be a dict with a single key being the name
            and the value being the value, or a two-element tuple of the name
            and the value.

        :param value:
            The alternative value to set - used with name

        :raises:
            ValueError - when implicit param is passed (or legacy tag_type param is "implicit")
        """
        ...
    
    @property
    def contents(self): # -> None:
        """
        :return:
            A byte string of the DER-encoded contents of the chosen alternative
        """
        ...
    
    @contents.setter
    def contents(self, value): # -> None:
        """
        :param value:
            A byte string of the DER-encoded contents of the chosen alternative
        """
        ...
    
    @property
    def name(self):
        """
        :return:
            A unicode string of the field name of the chosen alternative
        """
        ...
    
    def parse(self):
        """
        Parses the detected alternative

        :return:
            An Asn1Value object of the chosen alternative
        """
        ...
    
    @property
    def chosen(self):
        """
        :return:
            An Asn1Value object of the chosen alternative
        """
        ...
    
    @property
    def native(self):
        """
        The native Python datatype representation of this value

        :return:
            The .native value from the contained value object
        """
        ...
    
    def validate(self, class_, tag, contents): # -> None:
        """
        Ensures that the class and tag specified exist as an alternative

        :param class_:
            The integer class_ from the encoded value header

        :param tag:
            The integer tag from the encoded value header

        :param contents:
            A byte string of the contents of the value - used when the object
            is explicitly tagged

        :raises:
            ValueError - when value is not a valid alternative
        """
        ...
    
    def dump(self, force=...):
        """
        Encodes the value using DER

        :param force:
            If the encoded contents already exist, clear them and regenerate
            to ensure they are in DER format instead of BER format

        :return:
            A byte string of the DER-encoded value
        """
        ...
    


class Concat:
    """
    A class that contains two or more encoded child values concatentated
    together. THIS IS NOT PART OF THE ASN.1 SPECIFICATION! This exists to handle
    the x509.TrustedCertificate() class for OpenSSL certificates containing
    extra information.
    """
    _child_specs = ...
    _children = ...
    @classmethod
    def load(cls, encoded_data, strict=...): # -> Self:
        """
        Loads a BER/DER-encoded byte string using the current class as the spec

        :param encoded_data:
            A byte string of BER or DER encoded data

        :param strict:
            A boolean indicating if trailing data should be forbidden - if so, a
            ValueError will be raised when trailing data exists

        :return:
            A Concat object
        """
        ...
    
    def __init__(self, value=..., contents=..., strict=...) -> None:
        """
        :param value:
            A native Python datatype to initialize the object value with

        :param contents:
            A byte string of the encoded contents of the value

        :param strict:
            A boolean indicating if trailing data should be forbidden - if so, a
            ValueError will be raised when trailing data exists in contents

        :raises:
            ValueError - when an error occurs with one of the children
            TypeError - when an error occurs with one of the children
        """
        ...
    
    def __str__(self) -> str:
        """
        Since str is different in Python 2 and 3, this calls the appropriate
        method, __unicode__() or __bytes__()

        :return:
            A unicode string
        """
        ...
    
    def __bytes__(self): # -> Literal[b""]:
        """
        A byte string of the DER-encoded contents
        """
        ...
    
    def __unicode__(self): # -> str:
        """
        :return:
            A unicode string
        """
        ...
    
    def __repr__(self): # -> str:
        """
        :return:
            A unicode string
        """
        ...
    
    def __copy__(self): # -> Self:
        """
        Implements the copy.copy() interface

        :return:
            A new shallow copy of the Concat object
        """
        ...
    
    def __deepcopy__(self, memo): # -> Self:
        """
        Implements the copy.deepcopy() interface

        :param memo:
            A dict for memoization

        :return:
            A new deep copy of the Concat object and all child objects
        """
        ...
    
    def copy(self): # -> Self:
        """
        Copies the object

        :return:
            A Concat object
        """
        ...
    
    def debug(self, nest_level=...): # -> None:
        """
        Show the binary data and parsed data in a tree structure
        """
        ...
    
    def dump(self, force=...): # -> Literal[b""]:
        """
        Encodes the value using DER

        :param force:
            If the encoded contents already exist, clear them and regenerate
            to ensure they are in DER format instead of BER format

        :return:
            A byte string of the DER-encoded value
        """
        ...
    
    @property
    def contents(self): # -> Literal[b""]:
        """
        :return:
            A byte string of the DER-encoded contents of the children
        """
        ...
    
    def __len__(self): # -> int:
        """
        :return:
            Integer
        """
        ...
    
    def __getitem__(self, key):
        """
        Allows accessing children by index

        :param key:
            An integer of the child index

        :raises:
            KeyError - when an index is invalid

        :return:
            The Asn1Value object of the child specified
        """
        ...
    
    def __setitem__(self, key, value): # -> None:
        """
        Allows settings children by index

        :param key:
            An integer of the child index

        :param value:
            An Asn1Value object to set the child to

        :raises:
            KeyError - when an index is invalid
            ValueError - when the value is not an instance of Asn1Value
        """
        ...
    
    def __iter__(self):
        """
        :return:
            An iterator of child values
        """
        ...
    


class Primitive(Asn1Value):
    """
    Sets the class_ and method attributes for primitive, universal values
    """
    class_ = ...
    method = ...
    def __init__(self, value=..., default=..., contents=..., **kwargs) -> None:
        """
        Sets the value of the object before passing to Asn1Value.__init__()

        :param value:
            A native Python datatype to initialize the object value with

        :param default:
            The default value if no value is specified

        :param contents:
            A byte string of the encoded contents of the value
        """
        ...
    
    def set(self, value): # -> None:
        """
        Sets the value of the object

        :param value:
            A byte string
        """
        ...
    
    def dump(self, force=...):
        """
        Encodes the value using DER

        :param force:
            If the encoded contents already exist, clear them and regenerate
            to ensure they are in DER format instead of BER format

        :return:
            A byte string of the DER-encoded value
        """
        ...
    
    def __ne__(self, other) -> bool:
        ...
    
    def __eq__(self, other) -> bool:
        """
        :param other:
            The other Primitive to compare to

        :return:
            A boolean
        """
        ...
    


class AbstractString(Constructable, Primitive):
    """
    A base class for all strings that have a known encoding. In general, we do
    not worry ourselves with confirming that the decoded values match a specific
    set of characters, only that they are decoded into a Python unicode string
    """
    _encoding = ...
    _unicode = ...
    def set(self, value): # -> None:
        """
        Sets the value of the string

        :param value:
            A unicode string
        """
        ...
    
    def __unicode__(self): # -> str_cls:
        """
        :return:
            A unicode string
        """
        ...
    
    @property
    def native(self): # -> str_cls | None:
        """
        The native Python datatype representation of this value

        :return:
            A unicode string or None
        """
        ...
    


class Boolean(Primitive):
    """
    Represents a boolean in both ASN.1 and Python
    """
    tag = ...
    def set(self, value): # -> None:
        """
        Sets the value of the object

        :param value:
            True, False or another value that works with bool()
        """
        ...
    
    def __nonzero__(self): # -> bool:
        """
        :return:
            True or False
        """
        ...
    
    def __bool__(self): # -> bool:
        """
        :return:
            True or False
        """
        ...
    
    @property
    def native(self): # -> bool | None:
        """
        The native Python datatype representation of this value

        :return:
            True, False or None
        """
        ...
    


class Integer(Primitive, ValueMap):
    """
    Represents an integer in both ASN.1 and Python
    """
    tag = ...
    def set(self, value): # -> None:
        """
        Sets the value of the object

        :param value:
            An integer, or a unicode string if _map is set

        :raises:
            ValueError - when an invalid value is passed
        """
        ...
    
    def __int__(self) -> int:
        """
        :return:
            An integer
        """
        ...
    
    @property
    def native(self): # -> int | None:
        """
        The native Python datatype representation of this value

        :return:
            An integer or None
        """
        ...
    


class _IntegerBitString:
    """
    A mixin for IntegerBitString and BitString to parse the contents as an integer.
    """
    _unused_bits = ...
    @property
    def unused_bits(self): # -> tuple[()]:
        """
        The unused bits of the bit string encoding.

        :return:
            A tuple of 1s and 0s
        """
        ...
    


class BitString(_IntegerBitString, Constructable, Castable, Primitive, ValueMap):
    """
    Represents a bit string from ASN.1 as a Python tuple of 1s and 0s
    """
    tag = ...
    _size = ...
    def set(self, value): # -> None:
        """
        Sets the value of the object

        :param value:
            An integer or a tuple of integers 0 and 1

        :raises:
            ValueError - when an invalid value is passed
        """
        ...
    
    def __getitem__(self, key): # -> bool:
        """
        Retrieves a boolean version of one of the bits based on a name from the
        _map

        :param key:
            The unicode string of one of the bit names

        :raises:
            ValueError - when _map is not set or the key name is invalid

        :return:
            A boolean if the bit is set
        """
        ...
    
    def __setitem__(self, key, value): # -> None:
        """
        Sets one of the bits based on a name from the _map

        :param key:
            The unicode string of one of the bit names

        :param value:
            A boolean value

        :raises:
            ValueError - when _map is not set or the key name is invalid
        """
        ...
    
    @property
    def native(self): # -> set[Any] | tuple[()] | tuple[int, ...]:
        """
        The native Python datatype representation of this value

        :return:
            If a _map is set, a set of names, or if no _map is set, a tuple of
            integers 1 and 0. None if no value.
        """
        ...
    


class OctetBitString(Constructable, Castable, Primitive):
    """
    Represents a bit string in ASN.1 as a Python byte string
    """
    tag = ...
    _bytes = ...
    _unused_bits = ...
    def set(self, value): # -> None:
        """
        Sets the value of the object

        :param value:
            A byte string

        :raises:
            ValueError - when an invalid value is passed
        """
        ...
    
    def __bytes__(self): # -> bytes:
        """
        :return:
            A byte string
        """
        ...
    
    @property
    def native(self): # -> bytes | None:
        """
        The native Python datatype representation of this value

        :return:
            A byte string or None
        """
        ...
    
    @property
    def unused_bits(self): # -> tuple[()] | tuple[int, ...]:
        """
        The unused bits of the bit string encoding.

        :return:
            A tuple of 1s and 0s
        """
        ...
    


class IntegerBitString(_IntegerBitString, Constructable, Castable, Primitive):
    """
    Represents a bit string in ASN.1 as a Python integer
    """
    tag = ...
    def set(self, value): # -> None:
        """
        Sets the value of the object

        :param value:
            An integer

        :raises:
            ValueError - when an invalid value is passed
        """
        ...
    
    @property
    def native(self): # -> int | None:
        """
        The native Python datatype representation of this value

        :return:
            An integer or None
        """
        ...
    


class OctetString(Constructable, Castable, Primitive):
    """
    Represents a byte string in both ASN.1 and Python
    """
    tag = ...
    _bytes = ...
    def set(self, value): # -> None:
        """
        Sets the value of the object

        :param value:
            A byte string
        """
        ...
    
    def __bytes__(self): # -> byte_cls:
        """
        :return:
            A byte string
        """
        ...
    
    @property
    def native(self): # -> byte_cls | None:
        """
        The native Python datatype representation of this value

        :return:
            A byte string or None
        """
        ...
    


class IntegerOctetString(Constructable, Castable, Primitive):
    """
    Represents a byte string in ASN.1 as a Python integer
    """
    tag = ...
    _encoded_width = ...
    def set(self, value): # -> None:
        """
        Sets the value of the object

        :param value:
            An integer

        :raises:
            ValueError - when an invalid value is passed
        """
        ...
    
    @property
    def native(self): # -> int | None:
        """
        The native Python datatype representation of this value

        :return:
            An integer or None
        """
        ...
    
    def set_encoded_width(self, width): # -> None:
        """
        Set the explicit enoding width for the integer

        :param width:
            An integer byte width to encode the integer to
        """
        ...
    


class ParsableOctetString(Constructable, Castable, Primitive):
    tag = ...
    _parsed = ...
    _bytes = ...
    def __init__(self, value=..., parsed=..., **kwargs) -> None:
        """
        Allows providing a parsed object that will be serialized to get the
        byte string value

        :param value:
            A native Python datatype to initialize the object value with

        :param parsed:
            If value is None and this is an Asn1Value object, this will be
            set as the parsed value, and the value will be obtained by calling
            .dump() on this object.
        """
        ...
    
    def set(self, value): # -> None:
        """
        Sets the value of the object

        :param value:
            A byte string
        """
        ...
    
    def parse(self, spec=..., spec_params=...): # -> Asn1Value | None:
        """
        Parses the contents generically, or using a spec with optional params

        :param spec:
            A class derived from Asn1Value that defines what class_ and tag the
            value should have, and the semantics of the encoded value. The
            return value will be of this type. If omitted, the encoded value
            will be decoded using the standard universal tag based on the
            encoded tag number.

        :param spec_params:
            A dict of params to pass to the spec object

        :return:
            An object of the type spec, or if not present, a child of Asn1Value
        """
        ...
    
    def __bytes__(self): # -> byte_cls:
        """
        :return:
            A byte string
        """
        ...
    
    @property
    def native(self): # -> byte_cls | None:
        """
        The native Python datatype representation of this value

        :return:
            A byte string or None
        """
        ...
    
    @property
    def parsed(self): # -> Asn1Value | None:
        """
        Returns the parsed object from .parse()

        :return:
            The object returned by .parse()
        """
        ...
    
    def dump(self, force=...):
        """
        Encodes the value using DER

        :param force:
            If the encoded contents already exist, clear them and regenerate
            to ensure they are in DER format instead of BER format

        :return:
            A byte string of the DER-encoded value
        """
        ...
    


class ParsableOctetBitString(ParsableOctetString):
    tag = ...
    def set(self, value): # -> None:
        """
        Sets the value of the object

        :param value:
            A byte string

        :raises:
            ValueError - when an invalid value is passed
        """
        ...
    


class Null(Primitive):
    """
    Represents a null value in ASN.1 as None in Python
    """
    tag = ...
    contents = ...
    def set(self, value): # -> None:
        """
        Sets the value of the object

        :param value:
            None
        """
        ...
    
    @property
    def native(self): # -> None:
        """
        The native Python datatype representation of this value

        :return:
            None
        """
        ...
    


class ObjectIdentifier(Primitive, ValueMap):
    """
    Represents an object identifier in ASN.1 as a Python unicode dotted
    integer string
    """
    tag = ...
    _dotted = ...
    @classmethod
    def map(cls, value):
        """
        Converts a dotted unicode string OID into a mapped unicode string

        :param value:
            A dotted unicode string OID

        :raises:
            ValueError - when no _map dict has been defined on the class
            TypeError - when value is not a unicode string

        :return:
            A mapped unicode string
        """
        ...
    
    @classmethod
    def unmap(cls, value): # -> str_cls:
        """
        Converts a mapped unicode string value into a dotted unicode string OID

        :param value:
            A mapped unicode string OR dotted unicode string OID

        :raises:
            ValueError - when no _map dict has been defined on the class or the value can't be unmapped
            TypeError - when value is not a unicode string

        :return:
            A dotted unicode string OID
        """
        ...
    
    def set(self, value): # -> None:
        """
        Sets the value of the object

        :param value:
            A unicode string. May be a dotted integer string, or if _map is
            provided, one of the mapped values.

        :raises:
            ValueError - when an invalid value is passed
        """
        ...
    
    def __unicode__(self): # -> LiteralString | str:
        """
        :return:
            A unicode string
        """
        ...
    
    @property
    def dotted(self): # -> LiteralString | str:
        """
        :return:
            A unicode string of the object identifier in dotted notation, thus
            ignoring any mapped value
        """
        ...
    
    @property
    def native(self): # -> LiteralString | str | None:
        """
        The native Python datatype representation of this value

        :return:
            A unicode string or None. If _map is not defined, the unicode string
            is a string of dotted integers. If _map is defined and the dotted
            string is present in the _map, the mapped value is returned.
        """
        ...
    


class ObjectDescriptor(Primitive):
    """
    Represents an object descriptor from ASN.1 - no Python implementation
    """
    tag = ...


class InstanceOf(Primitive):
    """
    Represents an instance from ASN.1 - no Python implementation
    """
    tag = ...


class Real(Primitive):
    """
    Represents a real number from ASN.1 - no Python implementation
    """
    tag = ...


class Enumerated(Integer):
    """
    Represents a enumerated list of integers from ASN.1 as a Python
    unicode string
    """
    tag = ...
    def set(self, value): # -> None:
        """
        Sets the value of the object

        :param value:
            An integer or a unicode string from _map

        :raises:
            ValueError - when an invalid value is passed
        """
        ...
    
    @property
    def native(self): # -> None:
        """
        The native Python datatype representation of this value

        :return:
            A unicode string or None
        """
        ...
    


class UTF8String(AbstractString):
    """
    Represents a UTF-8 string from ASN.1 as a Python unicode string
    """
    tag = ...
    _encoding = ...


class RelativeOid(ObjectIdentifier):
    """
    Represents an object identifier in ASN.1 as a Python unicode dotted
    integer string
    """
    tag = ...


class Sequence(Asn1Value):
    """
    Represents a sequence of fields from ASN.1 as a Python object with a
    dict-like interface
    """
    tag = ...
    class_ = ...
    method = ...
    children = ...
    _contents = ...
    _mutated = ...
    _fields = ...
    _spec_callbacks = ...
    _field_map = ...
    _field_ids = ...
    _oid_pair = ...
    _oid_specs = ...
    _oid_nums = ...
    _precomputed_specs = ...
    def __init__(self, value=..., default=..., **kwargs) -> None:
        """
        Allows setting field values before passing everything else along to
        Asn1Value.__init__()

        :param value:
            A native Python datatype to initialize the object value with

        :param default:
            The default value if no value is specified
        """
        ...
    
    @property
    def contents(self): # -> bytes | None:
        """
        :return:
            A byte string of the DER-encoded contents of the sequence
        """
        ...
    
    @contents.setter
    def contents(self, value): # -> None:
        """
        :param value:
            A byte string of the DER-encoded contents of the sequence
        """
        ...
    
    def __len__(self): # -> int:
        """
        :return:
            Integer
        """
        ...
    
    def __getitem__(self, key): # -> Void:
        """
        Allows accessing fields by name or index

        :param key:
            A unicode string of the field name, or an integer of the field index

        :raises:
            KeyError - when a field name or index is invalid

        :return:
            The Asn1Value object of the field specified
        """
        ...
    
    def __setitem__(self, key, value): # -> None:
        """
        Allows settings fields by name or index

        :param key:
            A unicode string of the field name, or an integer of the field index

        :param value:
            A native Python datatype to set the field value to. This method will
            construct the appropriate Asn1Value object from _fields.

        :raises:
            ValueError - when a field name or index is invalid
        """
        ...
    
    def __delitem__(self, key): # -> None:
        """
        Allows deleting optional or default fields by name or index

        :param key:
            A unicode string of the field name, or an integer of the field index

        :raises:
            ValueError - when a field name or index is invalid, or the field is not optional or defaulted
        """
        ...
    
    def __iter__(self): # -> Generator[Any, Any, None]:
        """
        :return:
            An iterator of field key names
        """
        ...
    
    def spec(self, field_name):
        """
        Determines the spec to use for the field specified. Depending on how
        the spec is determined (_oid_pair or _spec_callbacks), it may be
        necessary to set preceding field values before calling this. Usually
        specs, if dynamic, are controlled by a preceding ObjectIdentifier
        field.

        :param field_name:
            A unicode string of the field name to get the spec for

        :return:
            A child class of asn1crypto.core.Asn1Value that the field must be
            encoded using
        """
        ...
    
    @property
    def native(self): # -> OrderedDict[Any, Any] | None:
        """
        The native Python datatype representation of this value

        :return:
            An OrderedDict or None. If an OrderedDict, all child values are
            recursively converted to native representation also.
        """
        ...
    
    def debug(self, nest_level=...): # -> None:
        """
        Show the binary data and parsed data in a tree structure
        """
        ...
    
    def dump(self, force=...):
        """
        Encodes the value using DER

        :param force:
            If the encoded contents already exist, clear them and regenerate
            to ensure they are in DER format instead of BER format

        :return:
            A byte string of the DER-encoded value
        """
        ...
    


class SequenceOf(Asn1Value):
    """
    Represents a sequence (ordered) of a single type of values from ASN.1 as a
    Python object with a list-like interface
    """
    tag = ...
    class_ = ...
    method = ...
    children = ...
    _contents = ...
    _mutated = ...
    _child_spec = ...
    def __init__(self, value=..., default=..., contents=..., spec=..., **kwargs) -> None:
        """
        Allows setting child objects and the _child_spec via the spec parameter
        before passing everything else along to Asn1Value.__init__()

        :param value:
            A native Python datatype to initialize the object value with

        :param default:
            The default value if no value is specified

        :param contents:
            A byte string of the encoded contents of the value

        :param spec:
            A class derived from Asn1Value to use to parse children
        """
        ...
    
    @property
    def contents(self): # -> bytes | None:
        """
        :return:
            A byte string of the DER-encoded contents of the sequence
        """
        ...
    
    @contents.setter
    def contents(self, value): # -> None:
        """
        :param value:
            A byte string of the DER-encoded contents of the sequence
        """
        ...
    
    def __len__(self): # -> int:
        """
        :return:
            An integer
        """
        ...
    
    def __getitem__(self, key):
        """
        Allows accessing children via index

        :param key:
            Integer index of child
        """
        ...
    
    def __setitem__(self, key, value): # -> None:
        """
        Allows overriding a child via index

        :param key:
            Integer index of child

        :param value:
            Native python datatype that will be passed to _child_spec to create
            new child object
        """
        ...
    
    def __delitem__(self, key): # -> None:
        """
        Allows removing a child via index

        :param key:
            Integer index of child
        """
        ...
    
    def __iter__(self): # -> Generator[Any, Any, None]:
        """
        :return:
            An iter() of child objects
        """
        ...
    
    def __contains__(self, item): # -> bool:
        """
        :param item:
            An object of the type cls._child_spec

        :return:
            A boolean if the item is contained in this SequenceOf
        """
        ...
    
    def append(self, value): # -> None:
        """
        Allows adding a child to the end of the sequence

        :param value:
            Native python datatype that will be passed to _child_spec to create
            new child object
        """
        ...
    
    def spec(self): # -> None:
        """
        Determines the spec to use for child values.

        :return:
            A child class of asn1crypto.core.Asn1Value that child values must be
            encoded using
        """
        ...
    
    @property
    def native(self): # -> list[Any] | None:
        """
        The native Python datatype representation of this value

        :return:
            A list or None. If a list, all child values are recursively
            converted to native representation also.
        """
        ...
    
    def debug(self, nest_level=...): # -> None:
        """
        Show the binary data and parsed data in a tree structure
        """
        ...
    
    def dump(self, force=...):
        """
        Encodes the value using DER

        :param force:
            If the encoded contents already exist, clear them and regenerate
            to ensure they are in DER format instead of BER format

        :return:
            A byte string of the DER-encoded value
        """
        ...
    


class Set(Sequence):
    """
    Represents a set of fields (unordered) from ASN.1 as a Python object with a
    dict-like interface
    """
    method = ...
    class_ = ...
    tag = ...
    _field_ids = ...


class SetOf(SequenceOf):
    """
    Represents a set (unordered) of a single type of values from ASN.1 as a
    Python object with a list-like interface
    """
    tag = ...


class EmbeddedPdv(Sequence):
    """
    A sequence structure
    """
    tag = ...


class NumericString(AbstractString):
    """
    Represents a numeric string from ASN.1 as a Python unicode string
    """
    tag = ...
    _encoding = ...


class PrintableString(AbstractString):
    """
    Represents a printable string from ASN.1 as a Python unicode string
    """
    tag = ...
    _encoding = ...


class TeletexString(AbstractString):
    """
    Represents a teletex string from ASN.1 as a Python unicode string
    """
    tag = ...
    _encoding = ...


class VideotexString(OctetString):
    """
    Represents a videotex string from ASN.1 as a Python byte string
    """
    tag = ...


class IA5String(AbstractString):
    """
    Represents an IA5 string from ASN.1 as a Python unicode string
    """
    tag = ...
    _encoding = ...


class AbstractTime(AbstractString):
    """
    Represents a time from ASN.1 as a Python datetime.datetime object
    """
    @property
    def native(self): # -> None:
        """
        The native Python datatype representation of this value

        :return:
            A datetime.datetime object, asn1crypto.util.extended_datetime object or
            None. The datetime object is usually timezone aware. If it's naive, then
            it's in the sender's local time; see X.680 sect. 42.3
        """
        ...
    


class UTCTime(AbstractTime):
    """
    Represents a UTC time from ASN.1 as a timezone aware Python datetime.datetime object
    """
    tag = ...
    _TIMESTRING_RE = ...
    def set(self, value): # -> None:
        """
        Sets the value of the object

        :param value:
            A unicode string or a datetime.datetime object

        :raises:
            ValueError - when an invalid value is passed
        """
        ...
    


class GeneralizedTime(AbstractTime):
    """
    Represents a generalized time from ASN.1 as a Python datetime.datetime
    object or asn1crypto.util.extended_datetime object in UTC
    """
    tag = ...
    _TIMESTRING_RE = ...
    def set(self, value): # -> None:
        """
        Sets the value of the object

        :param value:
            A unicode string, a datetime.datetime object or an
            asn1crypto.util.extended_datetime object

        :raises:
            ValueError - when an invalid value is passed
        """
        ...
    


class GraphicString(AbstractString):
    """
    Represents a graphic string from ASN.1 as a Python unicode string
    """
    tag = ...
    _encoding = ...


class VisibleString(AbstractString):
    """
    Represents a visible string from ASN.1 as a Python unicode string
    """
    tag = ...
    _encoding = ...


class GeneralString(AbstractString):
    """
    Represents a general string from ASN.1 as a Python unicode string
    """
    tag = ...
    _encoding = ...


class UniversalString(AbstractString):
    """
    Represents a universal string from ASN.1 as a Python unicode string
    """
    tag = ...
    _encoding = ...


class CharacterString(AbstractString):
    """
    Represents a character string from ASN.1 as a Python unicode string
    """
    tag = ...
    _encoding = ...


class BMPString(AbstractString):
    """
    Represents a BMP string from ASN.1 as a Python unicode string
    """
    tag = ...
    _encoding = ...


_UNIVERSAL_SPECS = ...
