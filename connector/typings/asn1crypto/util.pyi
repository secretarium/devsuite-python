"""
This type stub file was generated by pyright.
"""

import sys
from datetime import tzinfo

"""
Miscellaneous data helpers, including functions for converting integers to and
from bytes and UTC timezone. Exports the following items:

 - OrderedDict()
 - int_from_bytes()
 - int_to_bytes()
 - timezone.utc
 - utc_with_dst
 - create_timezone()
 - inet_ntop()
 - inet_pton()
 - uri_to_iri()
 - iri_to_uri()
"""
if sys.platform == 'win32':
    ...
else:
    ...
if sys.version_info <= (3, ):
    ...
else:
    def int_to_bytes(value, signed=..., width=...):
        """
        Converts an integer to a byte string

        :param value:
            The integer to convert

        :param signed:
            If the byte string should be encoded using two's complement

        :param width:
            If None, the minimal possible size (but at least 1),
            otherwise an integer of the byte width for the return value

        :return:
            A byte string
        """
        ...
    
    def int_from_bytes(value, signed=...): # -> int:
        """
        Converts a byte string to an integer

        :param value:
            The byte string to convert

        :param signed:
            If the byte string should be interpreted using two's complement

        :return:
            An integer
        """
        ...
    
class _UtcWithDst(tzinfo):
    """
    Utc class where dst does not return None; required for astimezone
    """
    def tzname(self, dt): # -> Literal['UTC']:
        ...
    
    def utcoffset(self, dt): # -> timedelta:
        ...
    
    def dst(self, dt): # -> timedelta:
        ...
    


utc_with_dst = ...
_timezone_cache = ...
def create_timezone(offset): # -> timezone:
    """
    Returns a new datetime.timezone object with the given offset.
    Uses cached objects if possible.

    :param offset:
        A datetime.timedelta object; It needs to be in full minutes and between -23:59 and +23:59.

    :return:
        A datetime.timezone object
    """
    ...

class extended_date:
    """
    A datetime.datetime-like object that represents the year 0. This is just
    to handle 0000-01-01 found in some certificates. Python's datetime does
    not support year 0.

    The proleptic gregorian calendar repeats itself every 400 years. Therefore,
    the simplest way to format is to substitute year 2000.
    """
    def __init__(self, year, month, day) -> None:
        """
        :param year:
            The integer 0

        :param month:
            An integer from 1 to 12

        :param day:
            An integer from 1 to 31
        """
        ...
    
    @property
    def year(self): # -> Literal[0]:
        """
        :return:
            The integer 0
        """
        ...
    
    @property
    def month(self): # -> int:
        """
        :return:
            An integer from 1 to 12
        """
        ...
    
    @property
    def day(self): # -> int:
        """
        :return:
            An integer from 1 to 31
        """
        ...
    
    def strftime(self, format): # -> str:
        """
        Formats the date using strftime()

        :param format:
            A strftime() format string

        :return:
            A str, the formatted date as a unicode string
            in Python 3 and a byte string in Python 2
        """
        ...
    
    def isoformat(self): # -> str:
        """
        Formats the date as %Y-%m-%d

        :return:
            The date formatted to %Y-%m-%d as a unicode string in Python 3
            and a byte string in Python 2
        """
        ...
    
    def replace(self, year=..., month=..., day=...): # -> date | extended_date:
        """
        Returns a new datetime.date or asn1crypto.util.extended_date
        object with the specified components replaced

        :return:
            A datetime.date or asn1crypto.util.extended_date object
        """
        ...
    
    def __str__(self) -> str:
        """
        :return:
            A str representing this extended_date, e.g. "0000-01-01"
        """
        ...
    
    def __eq__(self, other) -> bool:
        """
        Compare two extended_date objects

        :param other:
            The other extended_date to compare to

        :return:
            A boolean
        """
        ...
    
    def __ne__(self, other) -> bool:
        """
        Compare two extended_date objects

        :param other:
            The other extended_date to compare to

        :return:
            A boolean
        """
        ...
    
    def __cmp__(self, other): # -> Literal[-1, 1, 0]:
        """
        Compare two extended_date or datetime.date objects

        :param other:
            The other extended_date object to compare to

        :return:
            An integer smaller than, equal to, or larger than 0
        """
        ...
    
    def __lt__(self, other) -> bool:
        ...
    
    def __le__(self, other) -> bool:
        ...
    
    def __gt__(self, other) -> bool:
        ...
    
    def __ge__(self, other) -> bool:
        ...
    


class extended_datetime:
    """
    A datetime.datetime-like object that represents the year 0. This is just
    to handle 0000-01-01 found in some certificates. Python's datetime does
    not support year 0.

    The proleptic gregorian calendar repeats itself every 400 years. Therefore,
    the simplest way to format is to substitute year 2000.
    """
    DAYS_IN_400_YEARS = ...
    DAYS_IN_2000_YEARS = ...
    def __init__(self, year, *args, **kwargs) -> None:
        """
        :param year:
            The integer 0

        :param args:
            Other positional arguments; see datetime.datetime.

        :param kwargs:
            Other keyword arguments; see datetime.datetime.
        """
        ...
    
    @property
    def year(self): # -> Literal[0]:
        """
        :return:
            The integer 0
        """
        ...
    
    @property
    def month(self): # -> int:
        """
        :return:
            An integer from 1 to 12
        """
        ...
    
    @property
    def day(self): # -> int:
        """
        :return:
            An integer from 1 to 31
        """
        ...
    
    @property
    def hour(self): # -> int:
        """
        :return:
            An integer from 1 to 24
        """
        ...
    
    @property
    def minute(self): # -> int:
        """
        :return:
            An integer from 1 to 60
        """
        ...
    
    @property
    def second(self): # -> int:
        """
        :return:
            An integer from 1 to 60
        """
        ...
    
    @property
    def microsecond(self): # -> int:
        """
        :return:
            An integer from 0 to 999999
        """
        ...
    
    @property
    def tzinfo(self): # -> _TzInfo | None:
        """
        :return:
            If object is timezone aware, a datetime.tzinfo object, else None.
        """
        ...
    
    def utcoffset(self): # -> timedelta | None:
        """
        :return:
            If object is timezone aware, a datetime.timedelta object, else None.
        """
        ...
    
    def time(self): # -> _Time:
        """
        :return:
            A datetime.time object
        """
        ...
    
    def date(self): # -> extended_date:
        """
        :return:
            An asn1crypto.util.extended_date of the date
        """
        ...
    
    def strftime(self, format): # -> str:
        """
        Performs strftime(), always returning a str

        :param format:
            A strftime() format string

        :return:
            A str of the formatted datetime
        """
        ...
    
    def isoformat(self, sep=...): # -> str:
        """
        Formats the date as "%Y-%m-%d %H:%M:%S" with the sep param between the
        date and time portions

        :param set:
            A single character of the separator to place between the date and
            time

        :return:
            The formatted datetime as a unicode string in Python 3 and a byte
            string in Python 2
        """
        ...
    
    def replace(self, year=..., *args, **kwargs): # -> datetime | extended_datetime:
        """
        Returns a new datetime.datetime or asn1crypto.util.extended_datetime
        object with the specified components replaced

        :param year:
            The new year to substitute. None to keep it.

        :param args:
            Other positional arguments; see datetime.datetime.replace.

        :param kwargs:
            Other keyword arguments; see datetime.datetime.replace.

        :return:
            A datetime.datetime or asn1crypto.util.extended_datetime object
        """
        ...
    
    def astimezone(self, tz): # -> extended_datetime | datetime:
        """
        Convert this extended_datetime to another timezone.

        :param tz:
            A datetime.tzinfo object.

        :return:
            A new extended_datetime or datetime.datetime object
        """
        ...
    
    def timestamp(self): # -> float:
        """
        Return POSIX timestamp. Only supported in python >= 3.3

        :return:
            A float representing the seconds since 1970-01-01 UTC. This will be a negative value.
        """
        ...
    
    def __str__(self) -> str:
        """
        :return:
            A str representing this extended_datetime, e.g. "0000-01-01 00:00:00.000001-10:00"
        """
        ...
    
    def __eq__(self, other) -> bool:
        """
        Compare two extended_datetime objects

        :param other:
            The other extended_datetime to compare to

        :return:
            A boolean
        """
        ...
    
    def __ne__(self, other) -> bool:
        """
        Compare two extended_datetime objects

        :param other:
            The other extended_datetime to compare to

        :return:
            A boolean
        """
        ...
    
    def __cmp__(self, other): # -> Literal[-1, 1, 0]:
        """
        Compare two extended_datetime or datetime.datetime objects

        :param other:
            The other extended_datetime or datetime.datetime object to compare to

        :return:
            An integer smaller than, equal to, or larger than 0
        """
        ...
    
    def __lt__(self, other) -> bool:
        ...
    
    def __le__(self, other) -> bool:
        ...
    
    def __gt__(self, other) -> bool:
        ...
    
    def __ge__(self, other) -> bool:
        ...
    
    def __add__(self, other): # -> extended_datetime | datetime:
        """
        Adds a timedelta

        :param other:
            A datetime.timedelta object to add.

        :return:
            A new extended_datetime or datetime.datetime object.
        """
        ...
    
    def __sub__(self, other): # -> extended_datetime | datetime | timedelta | _NotImplementedType:
        """
        Subtracts a timedelta or another datetime.

        :param other:
            A datetime.timedelta or datetime.datetime or extended_datetime object to subtract.

        :return:
            If a timedelta is passed, a new extended_datetime or datetime.datetime object.
            Else a datetime.timedelta object.
        """
        ...
    
    def __rsub__(self, other):
        ...
    
    @classmethod
    def from_y2k(cls, value): # -> Self | datetime:
        """
        Revert substitution of year 2000.

        :param value:
            A datetime.datetime object which is 2000 years in the future.
        :return:
            A new extended_datetime or datetime.datetime object.
        """
        ...
    


